rules_version = '2';
service cloud.firestore {

  // Determine if the value of the field "key" is the same
  // before and after the request.
  function unchanged(key) {
    return (key in resource.data) 
      && (key in request.resource.data) 
      && (resource.data[key] == request.resource.data[key]);
  }

  // Helper function to check if user is admin
  function isAdmin() {
    return request.auth != null && 
           (request.auth.token.admin == true || 
            request.auth.uid == 'CtAyzps80VXRzna32Kdy0NHYcPe2');
  }

  match /databases/{database}/documents {
    // Admin collection for managing users
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // Admin data collection for application configuration
    match /admin_data/{document=**} {
      allow read, write: if isAdmin();
    }

    // Public data collection - anyone can read, only admins can write
    match /public_data/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /jobs/{jobId} {
      allow read, write: if request.auth.token.admin == true;
    }  

    // Users:
    //   - Authenticated user can read and write their own document
    //   - Admin can access all documents
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }

    // User Tokens:
    match /user_tokens/{userId} {
      // Full access for authenticated user's own document or admin
      allow read, write, delete: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());

      // Public can only read authorizedScopes and userEmail for login
      allow read: if 
        request.query.limit <= 1 && 
        request.query.orderBy == "userEmail" &&
        resource.data.keys().hasOnly(["authorizedScopes", "userEmail"]);
    }    

    // Restaurants:
    //   - Authenticated user can read
    //   - Authenticated user can create/update (for demo purposes only)
    //   - Updates are allowed if no fields are added and name is unchanged
    //   - Deletes are not allowed (default)
    match /restaurants/{restaurantId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if request.auth != null
                    && unchanged("name");
      
      // Ratings:
      //   - Authenticated user can read
      //   - Authenticated user can create if userId matches
      //   - Deletes and updates are not allowed (default)
      match /ratings/{ratingId} {
        allow read;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.userId == request.auth.uid;
      }
      match /messages/{messageId} {
        allow read;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.userId == request.auth.uid;
      }      
    }

    // Authorized scopes:
    //   - Anyone can read
    //   - Only owner or admin can write
    match /authorized_scopes/{userId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }    
    
    // User scopes:
    match /user_scopes/{userId} {
      allow read: if true;  // Allow public read access
      allow write: if request.auth != null && 
                  (request.auth.uid == userId || 
                   request.auth.uid == 'default' ||
                   isAdmin());
    }

    // User profiles:
    match /user_profiles/{userId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }

    match /logs/{logId} {
      allow read, write, delete: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || isAdmin());
    }        

    match /adminData/{userId} {
      allow read, write, delete: if request.auth != null && 
        (request.auth.uid == userId || userId == 'default' || isAdmin());
    }    

    match /topics/{topicId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }
  }
}
